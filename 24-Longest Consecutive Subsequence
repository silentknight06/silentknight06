--------------------------------------------24Longest Consecutive Subsequence----------------------------------------
--------------- methord 1---------------------


#include<bits/stdc++.h>
using namespace std;
int consetive(int arr[], int n){
 sort(arr, arr+n);
 int count = 1;
 int maxcount = 1;
 for(int i = 0; i<n-1; i++){
  if(arr[i+1]-arr[i]==1){
    count++;
    if(count>maxcount){
      maxcount = count;
    }
  }
else{
  count = 0;
}
 }
 return maxcount;
}
//return ans;

int main(){
  int n  = 4;
 int arr[n] = {1, 2, 3, 4, 9};
 cout<<consetive(arr, n);

  return 0;
} 

--------------------------------------------------------------2nd methord------------------------------------------------------------------------
#include<bits/stdc++.h>
using namespace std;
int consetive(int arr[], int n){

    unordered_set<int> S;
    int ans = 0;
 
   
    for (int i = 0; i < n; i++)
        S.insert(arr[i]);
 
    // check each possible sequence from
    // the start then update optimal length
    for (int i = 0; i < n; i++)
    {
        // if current element is the starting
        // element of a sequence
        if (S.find(arr[i] - 1) == S.end())
        {
            // Then check for next elements
            // in the sequence
            int j = arr[i];
            while (S.find(j) != S.end())
                j++;
 
            // update  optimal length if
            // this length is more
            ans = max(ans, j - arr[i]);
        }
    }
    return ans;
}
 
 


int main(){
  int n  = 4;
 int arr[n] = {1, 2, 3, 4, 9};
 cout<<consetive(arr, n);

  return 0;
} 







